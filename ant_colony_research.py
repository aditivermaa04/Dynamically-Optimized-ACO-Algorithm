# -*- coding: utf-8 -*-
"""Ant_Colony_Research.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NIzdVfo8ywDSspRW724XBBVe9KvSQrhg
"""

#aco_original

import numpy as np

class AntColony:
    def __init__(self, num_ants, num_iterations, alpha=1.0, beta=2.0, evaporation_rate=0.0, Q=1.0):
        self.num_ants = num_ants
        self.num_iterations = num_iterations
        self.alpha = alpha
        self.beta = beta
        self.evaporation_rate = evaporation_rate  # Set to 0.0 for original ACO
        self.Q = Q

    def optimize(self, distance_matrix):
        num_nodes = len(distance_matrix)
        pheromone = np.ones((num_nodes, num_nodes))
        best_distance = float('inf')
        best_path = []

        for iteration in range(self.num_iterations):
            all_paths = []
            all_distances = []

            for ant in range(self.num_ants):
                path = self.construct_path(distance_matrix, pheromone)
                distance = self.calculate_total_distance(path, distance_matrix)
                all_paths.append(path)
                all_distances.append(distance)

                if distance < best_distance:
                    best_distance = distance
                    best_path = path

            # Update pheromones without evaporation
            for path, distance in zip(all_paths, all_distances):
                for i in range(len(path) - 1):
                    a, b = path[i], path[i + 1]
                    pheromone[a][b] += self.Q / distance
                    pheromone[b][a] += self.Q / distance

        return best_path, best_distance

    def construct_path(self, distance_matrix, pheromone):
        num_nodes = len(distance_matrix)
        path = [np.random.randint(num_nodes)]
        visited = set(path)

        for _ in range(num_nodes - 1):
            current = path[-1]
            probabilities = self.calculate_probabilities(current, visited, distance_matrix, pheromone)
            next_node = self.select_next_node(probabilities)
            path.append(next_node)
            visited.add(next_node)

        return path

    def calculate_probabilities(self, current, visited, distance_matrix, pheromone):
        probabilities = []
        total = 0

        for j in range(len(distance_matrix)):
            if j not in visited:
                pher = pheromone[current][j] ** self.alpha
                heuristic = (1.0 / distance_matrix[current][j]) ** self.beta if distance_matrix[current][j] > 0 else 0
                prob = pher * heuristic
                probabilities.append((j, prob))
                total += prob

        return [(node, prob / total) for node, prob in probabilities] if total > 0 else [(j, 1.0) for j in range(len(distance_matrix)) if j not in visited]

    def select_next_node(self, probabilities):
        r = np.random.rand()
        cumulative = 0

        for node, prob in probabilities:
            cumulative += prob
            if r <= cumulative:
                return node

        return probabilities[-1][0]

    def calculate_total_distance(self, path, distance_matrix):
        distance = 0
        for i in range(len(path) - 1):
            distance += distance_matrix[path[i]][path[i + 1]]
        return distance

#aco_evaporation_updated

import numpy as np

class AntColony:
    def __init__(self, num_ants, num_iterations, alpha=1.0, beta=2.0, evaporation_rate=0.5, Q=1.0):
        self.num_ants = num_ants
        self.num_iterations = num_iterations
        self.alpha = alpha
        self.beta = beta
        self.evaporation_rate = evaporation_rate
        self.Q = Q

    def optimize(self, distance_matrix):
        num_nodes = len(distance_matrix)
        pheromone = np.ones((num_nodes, num_nodes))
        best_distance = float('inf')
        best_path = []

        for iteration in range(self.num_iterations):
            all_paths = []
            all_distances = []
            for ant in range(self.num_ants):
                path = self.construct_path(distance_matrix, pheromone)
                distance = self.calculate_total_distance(path, distance_matrix)
                all_paths.append(path)
                all_distances.append(distance)
                if distance < best_distance:
                    best_distance = distance
                    best_path = path

            pheromone *= (1 - self.evaporation_rate)
            for path, distance in zip(all_paths, all_distances):
                for i in range(len(path) - 1):
                    a, b = path[i], path[i + 1]
                    pheromone[a][b] += self.Q / distance
                    pheromone[b][a] += self.Q / distance

        return best_path, best_distance

    def construct_path(self, distance_matrix, pheromone):
        num_nodes = len(distance_matrix)
        path = [np.random.randint(num_nodes)]
        visited = set(path)
        for _ in range(num_nodes - 1):
            current = path[-1]
            probabilities = self.calculate_probabilities(current, visited, distance_matrix, pheromone)
            next_node = self.select_next_node(probabilities)
            path.append(next_node)
            visited.add(next_node)
        return path

    def calculate_probabilities(self, current, visited, distance_matrix, pheromone):
        probabilities = []
        total = 0
        for j in range(len(distance_matrix)):
            if j not in visited:
                pher = pheromone[current][j] ** self.alpha
                heuristic = (1.0 / distance_matrix[current][j]) ** self.beta if distance_matrix[current][j] > 0 else 0
                prob = pher * heuristic
                probabilities.append((j, prob))
                total += prob
        return [(node, prob / total) for node, prob in probabilities] if total > 0 else [(j, 1.0) for j in range(len(distance_matrix)) if j not in visited]

    def select_next_node(self, probabilities):
        r = np.random.rand()
        cumulative = 0
        for node, prob in probabilities:
            cumulative += prob
            if r <= cumulative:
                return node
        return probabilities[-1][0]

    def calculate_total_distance(self, path, distance_matrix):
        distance = 0
        for i in range(len(path) - 1):
            distance += distance_matrix[path[i]][path[i + 1]]
        return distance

#comparison of aco_original and aco_evaporation_updated

import numpy as np
import matplotlib.pyplot as plt
from scipy.stats import wilcoxon

# 🔢 Generate 20-city TSP problem
np.random.seed(42)
n_cities = 20
distance_matrix = np.random.randint(10, 100, size=(n_cities, n_cities))
np.fill_diagonal(distance_matrix, 0)

# 📈 Run ACO Comparison
n_runs = 30
num_iterations = 150
num_ants = 20

original_scores = []
evap_scores = []

for seed in range(n_runs):
    np.random.seed(seed)

    # Original ACO (no evaporation)
    aco_orig = AntColony(num_ants=num_ants, num_iterations=num_iterations, evaporation_rate=0.0)
    _, dist_orig = aco_orig.optimize(distance_matrix)
    original_scores.append(dist_orig)

    # Modified ACO (with evaporation)
    aco_evap = AntColony(num_ants=num_ants, num_iterations=num_iterations, evaporation_rate=0.4)
    _, dist_evap = aco_evap.optimize(distance_matrix)
    evap_scores.append(dist_evap)

# 📊 Results Summary
mean_orig = np.mean(original_scores)
mean_evap = np.mean(evap_scores)

std_orig = np.std(original_scores)
std_evap = np.std(evap_scores)

print("🔵 Original ACO:")
print(f"  Mean Distance: {mean_orig:.2f}")
print(f"  Std Deviation: {std_orig:.2f}\n")

print("🟢 Modified ACO (with Evaporation):")
print(f"  Mean Distance: {mean_evap:.2f}")
print(f"  Std Deviation: {std_evap:.2f}\n")

# 🧪 Wilcoxon Test (non-parametric statistical test)
stat, p_value = wilcoxon(original_scores, evap_scores)
print("📉 Wilcoxon Test:")
print(f"  Statistic: {stat:.4f}")
print(f"  P-Value: {p_value:.4f}")
if p_value < 0.05:
    print("✅ Result: Statistically significant improvement with evaporation.\n")
else:
    print("❌ Result: No significant difference found.\n")

# 📊 Boxplot Visualization
plt.figure(figsize=(9, 5))
plt.boxplot([original_scores, evap_scores], tick_labels=['Original ACO', 'ACO + Evaporation'])
plt.title("ACO vs. Modified ACO (20-city TSP, 30 Runs)")
plt.ylabel("Total Distance (lower is better)")
plt.grid(True)
plt.show()

#benchmark_function

import numpy as np
import pandas as pd
from tqdm import tqdm
import matplotlib.pyplot as plt
import seaborn as sns

# Define benchmark functions
def sphere_function(x):
    return np.sum(x**2)

def rastrigin_function(x):
    A = 10
    return A * len(x) + np.sum(x**2 - A * np.cos(2 * np.pi * x))

def rosenbrock_function(x):
    return np.sum(100.0 * (x[1:] - x[:-1]**2)**2 + (1 - x[:-1])**2)

functions = [sphere_function, rastrigin_function, rosenbrock_function]
function_names = ["Sphere", "Rastrigin", "Rosenbrock"]

# Dummy Ant Colony Optimizer for context (replace this with your own working implementation)
class AntColony:
    def __init__(self, num_ants, num_iterations, evaporation_rate, alpha, beta, Q):
        self.num_ants = num_ants
        self.num_iterations = num_iterations
        self.evaporation_rate = evaporation_rate
        self.alpha = alpha
        self.beta = beta
        self.Q = Q

    def optimize(self, distance_matrix):
        # Simulate optimization: return a fake best path and a pseudo "distance"
        # Replace this with your actual optimization logic
        dim = distance_matrix.shape[0]
        best_path = np.random.permutation(dim)
        best_distance = np.random.uniform(1.9, 2.5)  # Placeholder
        return best_path, best_distance

# ACO optimization wrapper
def optimize_with_aco(func, dim, bounds, evaporation_rate=0.5):
    aco = AntColony(
        num_ants=50,
        num_iterations=100,
        evaporation_rate=evaporation_rate,
        alpha=1.0,
        beta=2.0,
        Q=1.0
    )

    # Create a distance matrix (dummy setup — replace with real encoding of the problem)
    distance_matrix = np.random.rand(dim, dim) * (bounds[1] - bounds[0]) + bounds[0]

    # Optimize using ACO
    best_path, best_distance = aco.optimize(distance_matrix)
    return best_path, best_distance

# Updated benchmark function to collect raw run data
def run_benchmark(runs=50, dim=30, evaporation_rate=0.5):
    all_results = []

    for func, func_name in zip(functions, function_names):
        for _ in tqdm(range(runs), desc=f"Running {func_name}"):
            best_path, best_distance = optimize_with_aco(func, dim, bounds=(-5.12, 5.12), evaporation_rate=evaporation_rate)
            all_results.append({
                'Function': func_name,
                'Best Distance': best_distance
            })

    df = pd.DataFrame(all_results)
    return df

# Main Entry Point
if __name__ == "__main__":
    # Run the benchmark
    df_results = run_benchmark(runs=50, dim=30, evaporation_rate=0.5)

    # Save all results
    df_results.to_csv("aco_evaporation_benchmark_results.csv", index=False)
    print("Benchmark results saved to 'aco_evaporation_benchmark_results.csv'")

    # Plot function-wise boxplots
    plt.figure(figsize=(8, 6))
    sns.boxplot(x='Function', y='Best Distance', data=df_results)
    plt.xlabel('Benchmark Function')
    plt.ylabel('Best Distance')
    plt.title('ACO with Evaporation Benchmark Results by Function')
    plt.tight_layout()
    plt.savefig('aco_vs_functions_boxplot.png')
    plt.show()

#aco_continuous_algo

import numpy as np

class ContinuousACO:
    def __init__(self, num_ants, num_iterations, evaporation_rate=0.5, alpha=1.0, beta=2.0, Q=1.0):
        self.num_ants = num_ants
        self.num_iterations = num_iterations
        self.evaporation_rate = evaporation_rate
        self.alpha = alpha
        self.beta = beta
        self.Q = Q

    def optimize(self, func, dim, bounds):
        # Initialize mean and standard deviation for each dimension
        mean = np.random.uniform(bounds[0], bounds[1], dim)
        std_dev = np.full(dim, (bounds[1] - bounds[0]) / 2)

        best_solution = None
        best_value = float('inf')

        for iteration in range(self.num_iterations):
            solutions = []
            values = []

            for _ in range(self.num_ants):
                # Sample a solution
                solution = np.random.normal(mean, std_dev)
                # Ensure the solution is within bounds
                solution = np.clip(solution, bounds[0], bounds[1])
                value = func.evaluate(solution)
                solutions.append(solution)
                values.append(value)

                if value < best_value:
                    best_value = value
                    best_solution = solution

            # Update mean and std_dev based on the best solutions
            best_indices = np.argsort(values)[:int(self.num_ants * self.Q)]
            best_solutions = np.array(solutions)[best_indices]
            mean = np.mean(best_solutions, axis=0)
            std_dev = np.std(best_solutions, axis=0)
            # Apply evaporation
            std_dev *= (1 - self.evaporation_rate)

        return best_solution, best_value

#cec2014

!pip install opfunu

from opfunu.cec_based.cec2014 import F12014

# Initialize function F1 with 30 dimensions
func = F12014(ndim=30)

# Evaluate the function at a sample point
x = [0.0] * 30
value = func.evaluate(x)
print(f"Function value at x: {value}")

#cec2014

import pandas as pd
from opfunu.cec_based.cec2014 import F12014, F22014, F32014  # Import more as needed

# List of functions to test
functions = [F12014(ndim=30), F22014(ndim=30), F32014(ndim=30)]
function_names = ['F1', 'F2', 'F3']

results = []

aco = ContinuousACO(num_ants=50, num_iterations=100, evaporation_rate=0.5)

for func, name in zip(functions, function_names):
    best_solution, best_value = aco.optimize(func, dim=30, bounds=(-100, 100))
    results.append({'Function': name, 'Best Value': best_value})

df_results = pd.DataFrame(results)
print(df_results)

#cec2017

from tqdm import tqdm
import numpy as np
import pandas as pd

# Define or import your CEC2017 benchmark functions
def cec2017_f1(x): return np.sum(x**2)
def cec2017_f2(x): return np.sum(np.abs(x)) + np.prod(np.abs(x))
def cec2017_f3(x): return np.sum([np.sum(x[:i+1])**2 for i in range(len(x))])

cec_functions = [cec2017_f1, cec2017_f2, cec2017_f3]
function_names = ["F1", "F2", "F3"]

def optimize_function(func, dim=30, runs=30):
    bounds = (-100, 100)
    results = []
    for _ in tqdm(range(runs)):
        # Make sure to provide alpha, beta, and Q here
        aco = AntColony(
            num_ants=30,
            num_iterations=100,
            evaporation_rate=0.5,
            alpha=1.0,  # Pheromone importance
            beta=2.0,   # Visibility importance
            Q=1.0       # Pheromone update constant
        )
        distance_matrix = np.random.rand(dim, dim) * (bounds[1] - bounds[0]) + bounds[0]
        _, best_distance = aco.optimize(distance_matrix)
        results.append(best_distance)
    return results

# Run benchmark
benchmark_data = []
for func, name in zip(cec_functions, function_names):
    results = optimize_function(func)
    benchmark_data.append({
        "Function": name,
        "Best Value": np.min(results),
        "Mean Value": np.mean(results),
        "Std Dev": np.std(results)
    })

df_results = pd.DataFrame(benchmark_data)
print(df_results)

#cec2020

import numpy as np
import pandas as pd
from tqdm import tqdm

# Example CEC 2020-like functions
def cec2020_f1(x): return np.sum(x**2)
def cec2020_f2(x): return np.sum(np.abs(x)) + np.prod(np.abs(x))
def cec2020_f3(x): return np.sum([np.sum(x[:i+1])**2 for i in range(len(x))])

# List of functions and names
cec2020_functions = [cec2020_f1, cec2020_f2, cec2020_f3]
function_names = ["F1", "F2", "F3"]

# ACO class should be defined before running this, assumed imported from aco_evaporation.py
# from aco_evaporation import AntColony

# Optimization wrapper
def optimize_cec2020_function(func, dim=30, runs=30):
    bounds = (-100, 100)
    results = []

    for _ in tqdm(range(runs), desc=f"Optimizing {func.__name__}"):
        aco = AntColony(
            num_ants=30,
            num_iterations=100,
            alpha=1.0,
            beta=2.0,
            evaporation_rate=0.5,
            Q=1.0
        )

        # Fake distance matrix used as a search space placeholder
        distance_matrix = np.random.rand(dim, dim) * (bounds[1] - bounds[0]) + bounds[0]

        # Optimize (note: ACO is solving over a distance matrix, not directly minimizing func)
        _, best_distance = aco.optimize(distance_matrix)
        results.append(best_distance)

    return results

# Run benchmark
benchmark_data = []

for func, name in zip(cec2020_functions, function_names):
    results = optimize_cec2020_function(func)
    benchmark_data.append({
        "Function": name,
        "Best Value": np.min(results),
        "Mean Value": np.mean(results),
        "Std Dev": np.std(results)
    })

# Create results table
df_results = pd.DataFrame(benchmark_data)
print(df_results)

#cec2022

import numpy as np
import pandas as pd
from tqdm import tqdm

# Define simplified CEC 2022-like benchmark functions
def cec2022_f1(x):
    return np.sum(x**2)  # Sphere

def cec2022_f2(x):
    return np.sum(np.abs(x)) + np.prod(np.abs(x))  # Schwefel 1.2 variant

def cec2022_f3(x):
    return np.sum([np.sum(x[:i+1])**2 for i in range(len(x))])  # Griewank-like

# List of functions and names
cec2022_functions = [cec2022_f1, cec2022_f2, cec2022_f3]
function_names = ["F1", "F2", "F3"]

# Optimization function using ACO with evaporation
def optimize_cec2022_function(func, dim=30, runs=30):
    bounds = (-100, 100)
    results = []

    for _ in tqdm(range(runs), desc=f"Optimizing {func.__name__}"):
        aco = AntColony(
            num_ants=30,
            num_iterations=100,
            alpha=1.0,
            beta=2.0,
            evaporation_rate=0.5,
            Q=1.0
        )
        # Note: Random matrix used to simulate distance; this is a placeholder
        distance_matrix = np.random.rand(dim, dim) * (bounds[1] - bounds[0]) + bounds[0]
        _, best_distance = aco.optimize(distance_matrix)
        results.append(best_distance)

    return results

# Run all benchmarks
benchmark_data = []

for func, name in zip(cec2022_functions, function_names):
    results = optimize_cec2022_function(func)
    benchmark_data.append({
        "Function": name,
        "Best Value": np.min(results),
        "Mean Value": np.mean(results),
        "Std Dev": np.std(results)
    })

# Create and display DataFrame
df_results = pd.DataFrame(benchmark_data)
print(df_results)

# Optionally save to CSV
df_results.to_csv("cec2022_aco_results.csv", index=False)

#comparison of cec2014 , cec2017 , cec2020 , cec2022

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from tqdm import tqdm

# Sample CEC-like benchmark functions for simplicity
def f1(x): return np.sum(x**2)
def f2(x): return np.sum(np.abs(x)) + np.prod(np.abs(x))
def f3(x): return np.sum([np.sum(x[:i+1])**2 for i in range(len(x))])

cec_sets = {
    "CEC2014": [f1, f2, f3],
    "CEC2017": [f1, f2, f3],
    "CEC2020": [f1, f2, f3],
    "CEC2022": [f1, f2, f3],
}

function_names = ["F1", "F2", "F3"]

def optimize_function(func, dim=30, runs=30, bounds=(-100, 100)):
    results = []
    for _ in tqdm(range(runs), desc=f"Optimizing {func.__name__}"):
        aco = AntColony(num_ants=30, num_iterations=100, alpha=1.0, beta=2.0, evaporation_rate=0.5, Q=1.0)
        distance_matrix = np.random.rand(dim, dim) * (bounds[1] - bounds[0]) + bounds[0]
        _, best_distance = aco.optimize(distance_matrix)
        results.append(best_distance)
    return results

all_results = []

for year, funcs in cec_sets.items():
    for func, fname in zip(funcs, function_names):
        values = optimize_function(func)
        all_results.append({
            "Function": fname,
            "Year": year,
            "Best Value": np.min(values),
            "Mean Value": np.mean(values),
            "Std Dev": np.std(values)
        })

# Save to DataFrame
df_all = pd.DataFrame(all_results)
print(df_all)

# Save as CSV
df_all.to_csv("aco_cec_comparison_results.csv", index=False)

# Visualization
plt.figure(figsize=(12, 6))
sns.barplot(data=df_all, x="Function", y="Mean Value", hue="Year")
plt.title("Mean Performance Comparison across CEC Benchmarks")
plt.ylabel("Mean Fitness Value")
plt.tight_layout()
plt.savefig("mean_comparison_barplot.png")
plt.show()

plt.figure(figsize=(12, 6))
sns.lineplot(data=df_all, x="Year", y="Mean Value", hue="Function", marker="o")
plt.title("Trend of Mean Fitness per Function")
plt.ylabel("Mean Fitness Value")
plt.tight_layout()
plt.savefig("function_trend_lineplot.png")
plt.show()

plt.figure(figsize=(12, 6))
sns.boxplot(data=df_all, x="Function", y="Mean Value", hue="Year")
plt.title("Distribution of ACO Results")
plt.tight_layout()
plt.savefig("distribution_boxplot.png")
plt.show()

#engineering problem : Pressure Vessel Design

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from tqdm import tqdm

# ----------------------------------------
# ENGINEERING PROBLEM: Pressure Vessel Design
# ----------------------------------------
def pressure_vessel_design(x):
    x = np.asarray(x)
    x1 = np.round(x[0])  # thickness of shell (discrete)
    x2 = np.round(x[1])  # thickness of head (discrete)
    x3 = x[2]            # inner radius
    x4 = x[3]            # length of cylindrical section

    cost = (0.6224 * x1 * x3 * x4 +
            1.7781 * x2 * x3**2 +
            3.1661 * x1**2 * x4 +
            19.84 * x1**2 * x3)

    penalty = 0
    if x3 < 10:
        penalty += 1e6
    if x4 < 10:
        penalty += 1e6
    if x1 < 1 or x2 < 1:
        penalty += 1e6

    return cost + penalty


# ----------------------------------------
# ACO WITHOUT EVAPORATION
# ----------------------------------------
class ACOOriginal:
    def __init__(self, num_ants, num_iterations, alpha, beta, evaporation_rate, Q):
        self.num_ants = num_ants
        self.num_iterations = num_iterations
        self.alpha = alpha
        self.beta = beta
        self.Q = Q

    def optimize(self, distance_matrix):
        num_nodes = len(distance_matrix)
        pheromone = np.ones((num_nodes, num_nodes))
        best_distance = float('inf')
        best_path = []

        for _ in range(self.num_iterations):
            all_paths = []
            all_distances = []
            for _ in range(self.num_ants):
                path = list(np.random.permutation(num_nodes))
                distance = self.calculate_total_distance(path, distance_matrix)
                all_paths.append(path)
                all_distances.append(distance)
                if distance < best_distance:
                    best_distance = distance
                    best_path = path

            for path, dist in zip(all_paths, all_distances):
                for i in range(num_nodes - 1):
                    a, b = path[i], path[i + 1]
                    pheromone[a][b] += self.Q / dist
                    pheromone[b][a] += self.Q / dist

        return best_path, best_distance

    def calculate_total_distance(self, path, matrix):
        x = matrix[path[0]]
        return pressure_vessel_design(x)


# ----------------------------------------
# ACO WITH EVAPORATION
# ----------------------------------------
class ACOWithEvaporation:
    def __init__(self, num_ants, num_iterations, alpha, beta, evaporation_rate, Q):
        self.num_ants = num_ants
        self.num_iterations = num_iterations
        self.alpha = alpha
        self.beta = beta
        self.evaporation_rate = evaporation_rate
        self.Q = Q

    def optimize(self, distance_matrix):
        num_nodes = len(distance_matrix)
        pheromone = np.ones((num_nodes, num_nodes))
        best_distance = float('inf')
        best_path = []

        for _ in range(self.num_iterations):
            all_paths = []
            all_distances = []
            for _ in range(self.num_ants):
                path = list(np.random.permutation(num_nodes))
                distance = self.calculate_total_distance(path, distance_matrix)
                all_paths.append(path)
                all_distances.append(distance)
                if distance < best_distance:
                    best_distance = distance
                    best_path = path

            pheromone *= (1 - self.evaporation_rate)
            for path, dist in zip(all_paths, all_distances):
                for i in range(num_nodes - 1):
                    a, b = path[i], path[i + 1]
                    pheromone[a][b] += self.Q / dist
                    pheromone[b][a] += self.Q / dist

        return best_path, best_distance

    def calculate_total_distance(self, path, matrix):
        x = matrix[path[0]]
        return pressure_vessel_design(x)


# ----------------------------------------
# OPTIMIZATION AND COMPARISON
# ----------------------------------------
def optimize_with_model(model_class, model_name, func, dim=4, runs=30, bounds=(0.1, 100)):
    results = []
    for _ in tqdm(range(runs), desc=f"Optimizing with {model_name}"):
        aco = model_class(num_ants=30, num_iterations=100, alpha=1.0, beta=2.0, evaporation_rate=0.5, Q=1.0)
        distance_matrix = np.random.rand(dim, dim) * (bounds[1] - bounds[0]) + bounds[0]
        _, best_distance = aco.optimize(distance_matrix)
        results.append(best_distance)
    return results

# Run both models
results_original = optimize_with_model(ACOOriginal, "Original ACO", pressure_vessel_design)
results_evap = optimize_with_model(ACOWithEvaporation, "ACO with Evaporation", pressure_vessel_design)

# Create DataFrame for comparison
df_compare = pd.DataFrame({
    "Run": list(range(1, 31)),
    "Original ACO": results_original,
    "ACO with Evaporation": results_evap
})

# Summary stats
summary = pd.DataFrame({
    "Model": ["Original ACO", "ACO with Evaporation"],
    "Best": [np.min(results_original), np.min(results_evap)],
    "Mean": [np.mean(results_original), np.mean(results_evap)],
    "Std Dev": [np.std(results_original), np.std(results_evap)]
})
print("\nSummary Comparison:")
print(summary)

# Plot comparison
plt.figure(figsize=(12, 6))
plt.plot(df_compare["Run"], df_compare["Original ACO"], label="Original ACO", marker='o')
plt.plot(df_compare["Run"], df_compare["ACO with Evaporation"], label="ACO with Evaporation", marker='x')
plt.title("ACO Comparison on Pressure Vessel Design")
plt.xlabel("Run")
plt.ylabel("Best Cost Value")
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.savefig("pressure_vessel_aco_comparison.png")
plt.show()

# Engineering Problem: Speed Reducer Design

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from tqdm import tqdm

def speed_reducer_design(x):
    x = np.asarray(x)
    x1, x2, x3, x4, x5, x6, x7 = x

    # Objective function
    f = (0.7854 * x1 * x2**2 * (3.3333 * x3**2 + 14.9334 * x3 - 43.0934) -
         1.508 * x1 * (x6**2 + x7**2) +
         7.4777 * (x6**3 + x7**3) +
         0.7854 * (x4 * x6**2 + x5 * x7**2))

    # Constraints (penalty for violations)
    penalty = 0
    if x1 < 2.6 or x1 > 3.6: penalty += 1e6
    if x2 < 0.7 or x2 > 0.8: penalty += 1e6
    if x3 < 17 or x3 > 28: penalty += 1e6
    if x4 < 7.3 or x4 > 8.3: penalty += 1e6
    if x5 < 7.8 or x5 > 8.3: penalty += 1e6
    if x6 < 2.9 or x6 > 3.9: penalty += 1e6
    if x7 < 5.0 or x7 > 5.5: penalty += 1e6

    return f + penalty


# ----------------------------------------
# ACO WITHOUT EVAPORATION
# ----------------------------------------
class ACOOriginal:
    def __init__(self, num_ants, num_iterations, alpha, beta, evaporation_rate, Q):
        self.num_ants = num_ants
        self.num_iterations = num_iterations
        self.alpha = alpha
        self.beta = beta
        self.Q = Q

    def optimize(self, distance_matrix):
        num_nodes = len(distance_matrix)
        pheromone = np.ones((num_nodes, num_nodes))
        best_distance = float('inf')
        best_path = []

        for _ in range(self.num_iterations):
            all_paths = []
            all_distances = []
            for _ in range(self.num_ants):
                path = list(np.random.permutation(num_nodes))
                distance = self.calculate_total_distance(path, distance_matrix)
                all_paths.append(path)
                all_distances.append(distance)
                if distance < best_distance:
                    best_distance = distance
                    best_path = path

            for path, dist in zip(all_paths, all_distances):
                for i in range(num_nodes - 1):
                    a, b = path[i], path[i + 1]
                    pheromone[a][b] += self.Q / dist
                    pheromone[b][a] += self.Q / dist

        return best_path, best_distance

    def calculate_total_distance(self, path, matrix):
        x = matrix[path[0]]
        return speed_reducer_design(x)


# ----------------------------------------
# ACO WITH EVAPORATION
# ----------------------------------------
class ACOWithEvaporation:
    def __init__(self, num_ants, num_iterations, alpha, beta, evaporation_rate, Q):
        self.num_ants = num_ants
        self.num_iterations = num_iterations
        self.alpha = alpha
        self.beta = beta
        self.evaporation_rate = evaporation_rate
        self.Q = Q

    def optimize(self, distance_matrix):
        num_nodes = len(distance_matrix)
        pheromone = np.ones((num_nodes, num_nodes))
        best_distance = float('inf')
        best_path = []

        for _ in range(self.num_iterations):
            all_paths = []
            all_distances = []
            for _ in range(self.num_ants):
                path = list(np.random.permutation(num_nodes))
                distance = self.calculate_total_distance(path, distance_matrix)
                all_paths.append(path)
                all_distances.append(distance)
                if distance < best_distance:
                    best_distance = distance
                    best_path = path

            # Increased evaporation rate for faster pheromone decay
            pheromone *= (1 - self.evaporation_rate)

            # Increase pheromone updates based on path quality
            for path, dist in zip(all_paths, all_distances):
                for i in range(num_nodes - 1):
                    a, b = path[i], path[i + 1]
                    pheromone[a][b] += self.Q / dist
                    pheromone[b][a] += self.Q / dist

        return best_path, best_distance

    def calculate_total_distance(self, path, matrix):
        x = matrix[path[0]]
        return speed_reducer_design(x)


def optimize_with_model(model_class, model_name, func, dim=7, runs=30, bounds=(0.1, 100)):
    results = []
    for _ in tqdm(range(runs), desc=f"Optimizing with {model_name}"):
        # Adjusted model parameters for ACO with Evaporation
        if model_name == "ACO with Evaporation":
            aco = model_class(num_ants=50, num_iterations=200, alpha=1.5, beta=1.0, evaporation_rate=0.3, Q=2.0)
        else:
            aco = model_class(num_ants=30, num_iterations=100, alpha=1.0, beta=2.0, evaporation_rate=0.5, Q=1.0)

        distance_matrix = np.random.rand(dim, dim) * (bounds[1] - bounds[0]) + bounds[0]
        _, best_distance = aco.optimize(distance_matrix)
        results.append(best_distance)
    return results

# Run both models on speed reducer design
results_original = optimize_with_model(ACOOriginal, "Original ACO", speed_reducer_design)
results_evap = optimize_with_model(ACOWithEvaporation, "ACO with Evaporation", speed_reducer_design)

# Create DataFrame for comparison
df_compare = pd.DataFrame({
    "Run": list(range(1, 31)),
    "Original ACO": results_original,
    "ACO with Evaporation": results_evap
})

# Summary stats
summary = pd.DataFrame({
    "Model": ["Original ACO", "ACO with Evaporation"],
    "Best": [np.min(results_original), np.min(results_evap)],
    "Mean": [np.mean(results_original), np.mean(results_evap)],
    "Std Dev": [np.std(results_original), np.std(results_evap)]
})
print("\nSummary Comparison:")
print(summary)

# Plot comparison
plt.figure(figsize=(12, 6))
plt.plot(df_compare["Run"], df_compare["Original ACO"], label="Original ACO", marker='o')
plt.plot(df_compare["Run"], df_compare["ACO with Evaporation"], label="ACO with Evaporation", marker='x')
plt.title("ACO Comparison on Speed Reducer Design")
plt.xlabel("Run")
plt.ylabel("Best Value")
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.savefig("speed_reducer_aco_comparison.png")
plt.show()

# WELDED BEAM DESIGN - engineering problem

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from tqdm import tqdm

# ----------------------------------------
# ENGINEERING PROBLEM: Welded Beam Design
# ----------------------------------------
def welded_beam_design(x):
    h, l, t, b = x
    cost = 1.10471 * h**2 * l + 0.04811 * b * t * (14 + l)
    penalty = 0

    R = 6000
    L = 14
    E = 30e6
    G = 12e6
    tau_max = 13600
    sigma_max = 30000
    delta_max = 0.25

    try:
        J = 2 * (np.sqrt(2) * h * l * ((l ** 2) / 6 + (h + t) ** 2 / 2))
        tau = R / (np.sqrt(2) * h * l)
        sigma = 6 * R * L / (b * t ** 2)
        delta = 4 * R * L ** 3 / (E * b * t ** 3)
        Pc = (4.013 * E * np.sqrt((t ** 2 * b ** 6) / 36)) / L ** 2
    except:
        return cost + 1e6  # Failsafe penalty

    if tau > tau_max or sigma > sigma_max or delta > delta_max or Pc < 6000:
        penalty += 1e6

    return cost + penalty


# ----------------------------------------
# ACO ORIGINAL (No Evaporation)
# ----------------------------------------
class ACOOriginal:
    def __init__(self, num_ants, num_iterations, alpha, beta, evaporation_rate, Q):
        self.num_ants = num_ants
        self.num_iterations = num_iterations
        self.alpha = alpha
        self.beta = beta
        self.Q = Q

    def optimize(self, distance_matrix):
        num_nodes = len(distance_matrix)
        pheromone = np.ones((num_nodes, num_nodes))
        best_distance = float('inf')
        best_path = []

        for _ in range(self.num_iterations):
            for _ in range(self.num_ants):
                path = list(np.random.permutation(num_nodes))
                x = distance_matrix[path[0]]
                distance = welded_beam_design(x)
                if distance < best_distance:
                    best_distance = distance
                    best_path = x

                for i in range(num_nodes - 1):
                    a, b = path[i], path[i + 1]
                    pheromone[a][b] += self.Q / distance
                    pheromone[b][a] += self.Q / distance

        return best_path, best_distance


# ----------------------------------------
# ACO WITH EVAPORATION
# ----------------------------------------
class ACOWithEvaporation(ACOOriginal):
    def optimize(self, distance_matrix):
        num_nodes = len(distance_matrix)
        pheromone = np.ones((num_nodes, num_nodes))
        best_distance = float('inf')
        best_path = []

        for _ in range(self.num_iterations):
            pheromone *= (1 - 0.5)
            for _ in range(self.num_ants):
                path = list(np.random.permutation(num_nodes))
                x = distance_matrix[path[0]]
                distance = welded_beam_design(x)
                if distance < best_distance:
                    best_distance = distance
                    best_path = x

                for i in range(num_nodes - 1):
                    a, b = path[i], path[i + 1]
                    pheromone[a][b] += self.Q / distance
                    pheromone[b][a] += self.Q / distance

        return best_path, best_distance


# ----------------------------------------
# OPTIMIZATION & COMPARISON
# ----------------------------------------
def optimize_with_model(model_class, model_name, dim=4, runs=30, bounds=(0.1, 10)):
    results = []
    for _ in tqdm(range(runs), desc=f"Optimizing with {model_name}"):
        aco = model_class(num_ants=30, num_iterations=100, alpha=1.0, beta=2.0,
                          evaporation_rate=0.5, Q=1.0)
        distance_matrix = np.random.rand(30, dim) * (bounds[1] - bounds[0]) + bounds[0]
        _, best_distance = aco.optimize(distance_matrix)
        results.append(best_distance)
    return results

# Run models
results_original = optimize_with_model(ACOOriginal, "Original ACO")
results_evap = optimize_with_model(ACOWithEvaporation, "ACO with Evaporation")

# DataFrame for plotting
df_compare = pd.DataFrame({
    "Run": range(1, 31),
    "Original ACO": results_original,
    "ACO with Evaporation": results_evap
})

# Summary
summary = pd.DataFrame({
    "Model": ["Original ACO", "ACO with Evaporation"],
    "Best": [np.min(results_original), np.min(results_evap)],
    "Mean": [np.mean(results_original), np.mean(results_evap)],
    "Std Dev": [np.std(results_original), np.std(results_evap)]
})
print("\nSummary Comparison:")
print(summary)

# Plot
import seaborn as sns
plt.figure(figsize=(12, 6))
plt.plot(df_compare["Run"], df_compare["Original ACO"], label="Original ACO", marker='o')
plt.plot(df_compare["Run"], df_compare["ACO with Evaporation"], label="ACO with Evaporation", marker='x')
plt.title("ACO Comparison on Welded Beam Design")
plt.xlabel("Run")
plt.ylabel("Best Cost Value")
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.savefig("welded_beam_aco_comparison.png")
plt.show()

# SPRING DESIGN - engineering problem

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from tqdm import tqdm

# ----------------------------------------
# ENGINEERING PROBLEM: Spring Design
# ----------------------------------------
def spring_design(x):
    d, D, N = x
    N = np.round(N)
    cost = (N + 1) * d ** 2 * D
    penalty = 0

    G = 11.5e6
    Fmax = 1000
    S = 189000
    lmax = 14

    try:
        lf = Fmax / (G * d**4 / (8 * D**3 * N))
        tau = 8 * Fmax * D / (np.pi * d ** 3)
        surge_freq = np.sqrt(G / (8 * D ** 2 * N))
    except:
        return cost + 1e6

    if tau > S or D + d > 1.5 or lf > lmax or surge_freq < 300:
        penalty += 1e6

    return cost + penalty


# ----------------------------------------
# ACO Original and With Evaporation (same as previous)
# ----------------------------------------
class ACOOriginal:
    def __init__(self, num_ants, num_iterations, alpha, beta, evaporation_rate, Q):
        self.num_ants = num_ants
        self.num_iterations = num_iterations
        self.alpha = alpha
        self.beta = beta
        self.Q = Q

    def optimize(self, distance_matrix):
        num_nodes = len(distance_matrix)
        pheromone = np.ones((num_nodes, num_nodes))
        best_distance = float('inf')
        best_path = []

        for _ in range(self.num_iterations):
            for _ in range(self.num_ants):
                path = list(np.random.permutation(num_nodes))
                x = distance_matrix[path[0]]
                distance = spring_design(x)
                if distance < best_distance:
                    best_distance = distance
                    best_path = x

                for i in range(num_nodes - 1):
                    a, b = path[i], path[i + 1]
                    pheromone[a][b] += self.Q / distance
                    pheromone[b][a] += self.Q / distance

        return best_path, best_distance


class ACOWithEvaporation(ACOOriginal):
    def optimize(self, distance_matrix):
        num_nodes = len(distance_matrix)
        pheromone = np.ones((num_nodes, num_nodes))
        best_distance = float('inf')
        best_path = []

        for _ in range(self.num_iterations):
            pheromone *= (1 - 0.5)
            for _ in range(self.num_ants):
                path = list(np.random.permutation(num_nodes))
                x = distance_matrix[path[0]]
                distance = spring_design(x)
                if distance < best_distance:
                    best_distance = distance
                    best_path = x

                for i in range(num_nodes - 1):
                    a, b = path[i], path[i + 1]
                    pheromone[a][b] += self.Q / distance
                    pheromone[b][a] += self.Q / distance

        return best_path, best_distance


# ----------------------------------------
# OPTIMIZATION & COMPARISON
# ----------------------------------------
def optimize_with_model(model_class, model_name, dim=3, runs=30, bounds=(0.05, 2)):
    results = []
    for _ in tqdm(range(runs), desc=f"Optimizing with {model_name}"):
        aco = model_class(num_ants=30, num_iterations=100, alpha=1.0, beta=2.0,
                          evaporation_rate=0.5, Q=1.0)
        distance_matrix = np.random.rand(30, dim) * (bounds[1] - bounds[0]) + bounds[0]
        _, best_distance = aco.optimize(distance_matrix)
        results.append(best_distance)
    return results

# Run models
results_original = optimize_with_model(ACOOriginal, "Original ACO")
results_evap = optimize_with_model(ACOWithEvaporation, "ACO with Evaporation")

# DataFrame for plotting
df_compare = pd.DataFrame({
    "Run": range(1, 31),
    "Original ACO": results_original,
    "ACO with Evaporation": results_evap
})

# Summary
summary = pd.DataFrame({
    "Model": ["Original ACO", "ACO with Evaporation"],
    "Best": [np.min(results_original), np.min(results_evap)],
    "Mean": [np.mean(results_original), np.mean(results_evap)],
    "Std Dev": [np.std(results_original), np.std(results_evap)]
})
print("\nSummary Comparison:")
print(summary)

# Plot
plt.figure(figsize=(12, 6))
plt.plot(df_compare["Run"], df_compare["Original ACO"], label="Original ACO", marker='o')
plt.plot(df_compare["Run"], df_compare["ACO with Evaporation"], label="ACO with Evaporation", marker='x')
plt.title("ACO Comparison on Spring Design")
plt.xlabel("Run")
plt.ylabel("Best Cost Value")
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.savefig("spring_aco_comparison.png")
plt.show()

#Convergence Curve for ACO and updated ACO

import numpy as np
import matplotlib.pyplot as plt

# Original ACO
class ACOOriginal:
    def __init__(self, num_ants, num_iterations, alpha=1.0, beta=2.0, evaporation_rate=0.1, Q=1.0):
        self.num_ants = num_ants
        self.num_iterations = num_iterations
        self.alpha = alpha
        self.beta = beta
        self.evaporation_rate = evaporation_rate
        self.Q = Q

    def optimize(self, distance_matrix):
        num_nodes = len(distance_matrix)
        pheromone = np.ones((num_nodes, num_nodes))
        best_distance = float('inf')
        best_path = []
        convergence = []

        for iteration in range(self.num_iterations):
            all_paths = []
            all_distances = []
            for _ in range(self.num_ants):
                path = self.construct_path(distance_matrix, pheromone)
                distance = self.calculate_total_distance(path, distance_matrix)
                all_paths.append(path)
                all_distances.append(distance)
                if distance < best_distance:
                    best_distance = distance
                    best_path = path

            pheromone *= (1 - self.evaporation_rate)
            for path, distance in zip(all_paths, all_distances):
                for i in range(len(path) - 1):
                    a, b = path[i], path[i + 1]
                    pheromone[a][b] += self.Q / distance
                    pheromone[b][a] += self.Q / distance

            convergence.append(best_distance)

        return best_path, best_distance, convergence

    def construct_path(self, distance_matrix, pheromone):
        num_nodes = len(distance_matrix)
        path = [np.random.randint(num_nodes)]
        visited = set(path)
        for _ in range(num_nodes - 1):
            current = path[-1]
            probabilities = self.calculate_probabilities(current, visited, distance_matrix, pheromone)
            next_node = self.select_next_node(probabilities)
            path.append(next_node)
            visited.add(next_node)
        return path

    def calculate_probabilities(self, current, visited, distance_matrix, pheromone):
        probabilities = []
        total = 0
        for j in range(len(distance_matrix)):
            if j not in visited:
                pher = pheromone[current][j] ** self.alpha
                heuristic = (1.0 / distance_matrix[current][j]) ** self.beta if distance_matrix[current][j] > 0 else 0
                prob = pher * heuristic
                probabilities.append((j, prob))
                total += prob
        return [(node, prob / total) for node, prob in probabilities] if total > 0 else [(j, 1.0) for j in range(len(distance_matrix)) if j not in visited]

    def select_next_node(self, probabilities):
        r = np.random.rand()
        cumulative = 0
        for node, prob in probabilities:
            cumulative += prob
            if r <= cumulative:
                return node
        return probabilities[-1][0]

    def calculate_total_distance(self, path, distance_matrix):
        distance = 0
        for i in range(len(path) - 1):
            distance += distance_matrix[path[i]][path[i + 1]]
        return distance

# ACO with Evaporation
class ACOEvap:
    def __init__(self, num_ants, num_iterations, alpha=1.0, beta=2.0, evaporation_rate=0.5, Q=1.0):
        self.num_ants = num_ants
        self.num_iterations = num_iterations
        self.alpha = alpha
        self.beta = beta
        self.evaporation_rate = evaporation_rate
        self.Q = Q

    def optimize(self, distance_matrix):
        num_nodes = len(distance_matrix)
        pheromone = np.ones((num_nodes, num_nodes))
        best_distance = float('inf')
        best_path = []
        convergence = []

        for iteration in range(self.num_iterations):
            all_paths = []
            all_distances = []
            for _ in range(self.num_ants):
                path = self.construct_path(distance_matrix, pheromone)
                distance = self.calculate_total_distance(path, distance_matrix)
                all_paths.append(path)
                all_distances.append(distance)
                if distance < best_distance:
                    best_distance = distance
                    best_path = path

            pheromone *= (1 - self.evaporation_rate)
            for path, distance in zip(all_paths, all_distances):
                for i in range(len(path) - 1):
                    a, b = path[i], path[i + 1]
                    pheromone[a][b] += self.Q / distance
                    pheromone[b][a] += self.Q / distance

            convergence.append(best_distance)

        return best_path, best_distance, convergence

    def construct_path(self, distance_matrix, pheromone):
        num_nodes = len(distance_matrix)
        path = [np.random.randint(num_nodes)]
        visited = set(path)
        for _ in range(num_nodes - 1):
            current = path[-1]
            probabilities = self.calculate_probabilities(current, visited, distance_matrix, pheromone)
            next_node = self.select_next_node(probabilities)
            path.append(next_node)
            visited.add(next_node)
        return path

    def calculate_probabilities(self, current, visited, distance_matrix, pheromone):
        probabilities = []
        total = 0
        for j in range(len(distance_matrix)):
            if j not in visited:
                pher = pheromone[current][j] ** self.alpha
                heuristic = (1.0 / distance_matrix[current][j]) ** self.beta if distance_matrix[current][j] > 0 else 0
                prob = pher * heuristic
                probabilities.append((j, prob))
                total += prob
        return [(node, prob / total) for node, prob in probabilities] if total > 0 else [(j, 1.0) for j in range(len(distance_matrix)) if j not in visited]

    def select_next_node(self, probabilities):
        r = np.random.rand()
        cumulative = 0
        for node, prob in probabilities:
            cumulative += prob
            if r <= cumulative:
                return node
        return probabilities[-1][0]

    def calculate_total_distance(self, path, distance_matrix):
        distance = 0
        for i in range(len(path) - 1):
            distance += distance_matrix[path[i]][path[i + 1]]
        return distance

# Distance Matrix Creator
def create_distance_matrix(n_nodes=20, seed=42):
    np.random.seed(seed)
    coordinates = np.random.rand(n_nodes, 2) * 100
    distance_matrix = np.linalg.norm(coordinates[:, np.newaxis] - coordinates[np.newaxis, :], axis=2)
    return distance_matrix

# Plot Convergence
def plot_convergence():
    distance_matrix = create_distance_matrix()

    # Run ACO with Evaporation
    aco_evap = ACOEvap(num_ants=30, num_iterations=100, evaporation_rate=0.5)
    _, _, convergence_evap = aco_evap.optimize(distance_matrix)

    # Run Original ACO
    aco_orig = ACOOriginal(num_ants=30, num_iterations=100, evaporation_rate=0.1)
    _, _, convergence_orig = aco_orig.optimize(distance_matrix)

    # Plot
    plt.figure(figsize=(10, 6))
    plt.plot(convergence_orig, label="Original ACO", linestyle='--', color='blue')
    plt.plot(convergence_evap, label="ACO with Evaporation", linestyle='-', color='green')
    plt.xlabel("Iterations")
    plt.ylabel("Best Distance Found")
    plt.title("Convergence Curve Comparison")
    plt.legend()
    plt.grid(True)
    plt.savefig("convergence_comparison.png", dpi=300)
    plt.show()

# Run the convergence plot function
plot_convergence()









